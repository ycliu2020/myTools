%%---------------------------------------------------------
% Author       : LYC
% Date         : 2020-06-09 15:50:13
% LastEditTime : 2020-09-08 10:52:19
% LastEditors  : LYC
% Description  :
% FilePath     : /code/home/liuyc/lib/tools/matlab/myTools/a_rschingFun/cmip/cmipPlotParameters.m
%
%%---------------------------------------------------------
function [mlabels, areaNum] = cmipPlotParameters(sfcToa, landOrNot, figType)
    % By liuyincheng (ycliu@smail.nju.edu.cn)
    % purpose: auto output plot parameters, so we only need to modify once if something change.
    % eg:[mlabels, areaNum] = plotParameters('toa', 'land','radEffect')
    %
    % sfcToa: input, determine 'SFC', 'TOA', 'ATM(TOA-SFC)'
    % landOrNot: input, determine 'landSea' or 'land','china'
    % figType: input, determine  'radEffect', 'nonLocalCld_rad','nonLocalCld_Ts','nonLocalCld3'

    %% commom labels
    level_label = {'SFC', 'TOA', 'ATM(TOA-SFC)'}; % plot which level to plot
    mlabels.month = {'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'};
    mlabels.season = {'MAM', 'JJA', 'SON', 'DJF'};
    unitRad = ' $\left( W\cdot m^{-2}/10a \right) $';
    unitTemp = ' (K/10a)';
    mlabels.algmPath = strcat('y_cloudCal_', figType);

    if strcmp(figType, 'radEffect') == 1

        if mean(sfcToa == 1) == 1 || strcmp(sfcToa, 'SFC') == 1 || strcmp(sfcToa, 'sfc') == 1
            sfcToa = 1;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts radEffect', 'RHeating(sfc)', 'RHeating include LH+SH', ...
                                'Ta radEffect', 'Cloud radEffect', 'q radEffect', ...
                                'Albedo radEffect', 'Ta+q+Alb+Cloud radEffect', 'Kernel Residual', ...
                                'Ta radEffect(near sfc)', 'Ta radEffect(without near sfc) ', 'Ts Effect on atmos'}; %4*3
            mlabels.componentNames = {'dRsfc_ts', 'drhs', 'drhsPlus', ...
                                    'dRsfc_ta', 'dRsfc_cloud', 'dRsfc_q', ...
                                    'dRsfc_alb', 'dRsfc_mainEffect', 'dRsfc_residual', ...
                                    'dRsfc_tas2', 'dRsfc_taOnly2', 'dRatm_tsAtom', 'dRsfc_ts'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        elseif mean(sfcToa == 2) == 1 || strcmp(sfcToa, 'TOA') == 1 || strcmp(sfcToa, 'toa') == 1
            sfcToa = 2;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'TOA net Flux', 'Ts radEffect', 'Ts', ...
                                'Ta radEffect', 'Cloud radEffect', 'q radEffect', ...
                                'Albedo radEffect', 'Ta+q+Alb+Cloud radEffect', 'Kernel Residual', ...
                                'Ta radEffect(near sfc)', 'Ta radEffect(without near sfc) ', 'Ts Effect on atmos'}; %4*3
            mlabels.componentNames = {'dnetTOA', 'dRtoa_ts', 'dts', ...
                                    'dRtoa_ta', 'dRtoa_cloud', 'dRtoa_q', ...
                                    'dRtoa_alb', 'dRtoa_mainEffect', 'dRtoa_residual', ...
                                    'dRtoa_tas2', 'dRtoa_taOnly2', 'dRatm_tsAtom', 'dRtoa_ts'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        elseif mean(sfcToa == 3) == 1 || strcmp(sfcToa, 'ATM') == 1 || strcmp(sfcToa, 'atm') == 1
            sfcToa = 3;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts radEffect(sfc)', 'RHeating(sfc)', 'RHeating include LH+SH(sfc)', ...
                                'Ta radEffect', 'Cloud radEffect', 'q radEffect', ...
                                'Albedo radEffect', 'Ta+q+Alb+Cloud radEffect', 'Kernel Residual', ...
                                'Ta radEffect(near sfc)', 'Ta radEffect(without near sfc) ', 'Ts radEffect'}; %4*3
            mlabels.componentNames = {'dRsfc_ts', 'drhs', 'drhsPlus', ...
                                    'dRatm_ta', 'dRatm_cloud', 'dRatm_q', ...
                                    'dRatm_alb', 'dRatm_mainEffect', 'dRatm_residual', ...
                                    'dRatm_tas2', 'dRatm_taOnly2', 'dRatm_tsAtom'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};


        end
 
    elseif strcmp(figType, 'radEffect_nodp') == 1

        if mean(sfcToa == 2) == 1 || strcmp(sfcToa, 'TOA') == 1 || strcmp(sfcToa, 'toa') == 1
            sfcToa = 2;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts radEffect', 'TOA net Flux', 'RHeating(sfc)', ...
                                'Ta radEffect', 'Ts radEffect', 'Ts radEffect ', ...
                                'Ts Effect on atmos', 'Ta+q+Alb+Cloud radEffect', 'Kernel Residual', ...
                                'Cloud radEffect', 'q radEffect', 'Albedo radEffect'}; %4*3
            mlabels.componentNames = {'dRtoa_ts', 'dnetTOA', 'drhs', ...
                                    'dRtoa_ta', 'dRtoa_ts', 'dRtoa_ts', ...
                                    'dRatm_tsAtom', 'dRtoa_mainEffect', 'dRtoa_residual', ...
                                    'dRtoa_cloud', 'dRtoa_q', 'dRtoa_alb', 'dRtoa_ts'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};

        end

    elseif strcmp(figType, 'nonLocalCld_rad') == 1

        if mean(sfcToa == 1) == 1 || strcmp(sfcToa, 'SFC') == 1 || strcmp(sfcToa, 'sfc') == 1
            sfcToa = 1;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts radEffect', 'RHeating include LH+SH', 'RHeating(sfc)', ...
                                'Cloud radEffect', 'non-local cloud radEffect', '$k2\cdot \frac{\partial R}{\partial Tsg}$', ...
                                'cloud+non-local cloud radEffect', 'cloud+non-local cloud+$k2\cdot \frac{\partial R}{\partial Tsg}$ radEffect', 'Ta+q+Alb+Cloud radEffect', ...
                                'Ta radEffect', 'q radEffect', 'Albedo radEffect'}; %4*3
            mlabels.componentNames = {'dRsfc_ts', 'drhsPlus', 'drhs', ...
                                    'dRsfc_cloud', 'dRnonLocalCld', 'dRk2', ...
                                    'dRsumNonlocalCld', 'dRsumNonlocalCldK2', 'dRsfc_mainEffect', ...
                                    'dRsfc_ta', 'dRsfc_q', 'dRsfc_alb'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        elseif mean(sfcToa == 2) == 1 || strcmp(sfcToa, 'TOA') == 1 || strcmp(sfcToa, 'toa') == 1
            sfcToa = 2;
            %% specific labels
            mlabels.unite = {unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts radEffect', 'TOA net Flux', 'RHeating(sfc)', ...
                                'Cloud radEffect', 'non-local cloud radEffect', '$k2\cdot \frac{\partial R}{\partial Tsg}$', ...
                                'cloud+non-local cloud radEffect', 'cloud+non-local cloud+$k2\cdot \frac{\partial R}{\partial Tsg}$ radEffect', 'Ta+q+Alb+Cloud radEffect', ...
                                'Ta radEffect', 'q radEffect', 'Albedo radEffect'}; %4*3
            mlabels.componentNames = {'dRtoa_ts', 'dnetTOA', 'drhs', ...
                                    'dRtoa_cloud', 'dRnonLocalCld', 'dRk2', ...
                                    'dRsumNonlocalCld', 'dRsumNonlocalCldK2', 'dRtoa_mainEffect', ...
                                    'dRtoa_ta', 'dRtoa_q', 'dRtoa_alb'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        end

    elseif strcmp(figType, 'nonLocalCld_Ts') == 1

        if mean(sfcToa == 1) == 1 || strcmp(sfcToa, 'SFC') == 1 || strcmp(sfcToa, 'sfc') == 1
            sfcToa = 1;
            %% specific labels
            mlabels.unite = {unitTemp, unitRad, unitRad, ...
                            unitTemp, unitTemp, unitTemp, ...
                            unitTemp, unitTemp, unitTemp, ...
                            unitTemp, unitTemp, unitTemp};
            mlabels.component = {'Ts', 'RHeating include LH+SH', 'RHeating(sfc)', ...
                                'Cloud TsEffect', 'non-local cloud TsEffect', '$k2\cdot \frac{\partial R}{\partial Tsg}$ TsEffect', ...
                                'cloud+non-local cloud TsEffect', 'cloud+non-local cloud+$k2\cdot \frac{\partial R}{\partial Tsg}$ TsEffect', 'Ta+q+Alb+Cloud TsEffect', ...
                                'Ta TsEffect', 'q TsEffect', 'Albedo TsEffect'}; %4*3
            mlabels.componentNames = {'dts', 'drhsPlus', 'drhs', ...
                                    'dTs_cld', 'dTsnonLocalCld', 'dTsk2', ...
                                    'dTssumNonlocalCld', 'dTssumNonlocalCldK2', 'dTs_mainEffect', ...
                                    'dTs_ta', 'dTs_hus', 'dTs_alb'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        elseif mean(sfcToa == 2) == 1 || strcmp(sfcToa, 'TOA') == 1 || strcmp(sfcToa, 'toa') == 1
            sfcToa = 2;
            %% specific labels
            mlabels.unite = {unitTemp, unitRad, unitRad, ...
                            unitTemp, unitTemp, unitTemp, ...
                            unitTemp, unitTemp, unitTemp, ...
                            unitTemp, unitTemp, unitTemp};
            mlabels.component = {'Ts', 'TOA net Flux', 'RHeating(sfc)', ...
                                'Cloud TsEffect', 'non-local cloud TsEffect', '$k2\cdot \frac{\partial R}{\partial Tsg}$ TsEffect', ...
                                'cloud+non-local cloud TsEffect', 'cloud+non-local cloud+$k2\cdot \frac{\partial R}{\partial Tsg}$ TsEffect', 'Ta+q+Alb+Cloud TsEffect', ...
                                'Ta TsEffect', 'q TsEffect', 'Albedo TsEffect'}; %4*3
            mlabels.componentNames = {'dts', 'dnetTOA', 'drhs', ...
                                    'dTs_cld', 'dTsnonLocalCld', 'dTsk2', ...
                                    'dTssumNonlocalCld', 'dTssumNonlocalCldK2', 'dTs_mainEffect', ...
                                    'dTs_ta', 'dTs_hus', 'dTs_alb'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        end

    elseif strcmp(figType, 'nonLocalCld3') == 1

        if mean(sfcToa == 1) == 1 || strcmp(sfcToa, 'SFC') == 1 || strcmp(sfcToa, 'sfc') == 1
            sfcToa = 1;
            %% specific labels
            mlabels.unite = {unitTemp, unitTemp, unitTemp, ...
                            unitTemp, unitTemp, unitTemp, ...
                            unitRad, unitRad, unitRad, ...
                            unitRad, unitRad, unitRad};
            mlabels.component = {'Ts', 'Ta TempEffect', 'Ta+q+Alb+Cloud TempEffect', ...
                                'Cloud TempEffect', 'nonLocal cloud TempEffect', 'cloud+nonLocal cloud TempEffect', ...
                                'Ts RadEffect', 'Ta RadEffect', 'Ta+q+Alb+Cloud RadEffect', ...
                                'Cloud RadEffect', 'nonLocal cloud RadEffect', 'cloud+nonLocal cloud RadEffect'}; %4*3
            mlabels.componentNames = {'dts', 'dTs_ta', 'dTs_mainEffect', ...
                                    'dTs_cld', 'dTsnonLocalCld3', 'dTssumNonlocalCld3', ...
                                    'dRsfc_ts', 'dRsfc_ta', 'dRsfc_mainEffect', ...
                                    'dRsfc_cloud', 'dRnonLocalCld3', 'dRsumNonlocalCld3'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        end
    elseif strcmp(figType, 'nonLocalCld3_speci') == 1
        if mean(sfcToa == 1) == 1 || strcmp(sfcToa, 'SFC') == 1 || strcmp(sfcToa, 'sfc') == 1
            sfcToa = 1;
            %% specific labels
            mlabels.unite = {unitTemp, unitTemp, unitTemp};
            mlabels.component = {'Ts', 'nonLocal cloud TempEffect', 'cloud+nonLocal cloud TempEffect'}; %1*3
            mlabels.componentNames = {'dts', 'dTsnonLocalCld3', 'dTssumNonlocalCld3'};
            mlabels.vars = strcat('trendyr_', mlabels.componentNames);
            mlabels.level = level_label{sfcToa};
        end

    end

    if mean(landOrNot == 0) == 1 || strcmp(landOrNot, 'land sea') == 1 || strcmp(landOrNot, 'landSea') == 1 || strcmp(landOrNot, 'landsea') == 1
        areaNum = 0;
        mlabels.area = 'landSea';
    elseif mean(landOrNot == 1) == 1 || strcmp(landOrNot, 'land') == 1
        areaNum = 1;
        mlabels.area = 'land';
    elseif mean(landOrNot == 2) == 1 || strcmp(landOrNot, 'china') == 1
        areaNum = 2;
        mlabels.area = 'china';
    end

    mlabels.fileN1 = strcat(mlabels.area, '_', figType);

end
